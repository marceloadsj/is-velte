/* Void.svelte generated by Svelte v3.9.1 */
import {
  SvelteComponent,
  assign,
  bubble,
  children,
  claim_element,
  detach,
  element,
  exclude_internal_props,
  get_spread_update,
  init,
  insert,
  listen,
  noop,
  safe_not_equal,
  set_attributes
} from "svelte/internal";

function getClientVoid(tag) {
  function create_fragment(ctx) {
    var div, dispose;

    var div_levels = [ctx.$$props];

    var div_data = {};
    for (var i = 0; i < div_levels.length; i += 1) {
      div_data = assign(div_data, div_levels[i]);
    }

    return {
      c() {
        div = element(tag);
        this.h();
      },

      l(nodes) {
        div = claim_element(nodes, tag.toUpperCase(), {}, false);
        var div_nodes = children(div);

        div_nodes.forEach(detach);
        this.h();
      },

      h() {
        set_attributes(div, div_data);
        dispose = listen(div, "click", ctx.click_handler);
      },

      m(target, anchor) {
        insert(target, div, anchor);
      },

      p(changed, ctx) {
        set_attributes(
          div,
          get_spread_update(div_levels, [changed.$$props && ctx.$$props])
        );
      },

      i: noop,
      o: noop,

      d(detaching) {
        if (detaching) {
          detach(div);
        }

        dispose();
      }
    };
  }

  function instance($$self, $$props, $$invalidate) {
    function click_handler(event) {
      bubble($$self, event);
    }

    $$self.$set = $$new_props => {
      $$invalidate(
        "$$props",
        ($$props = assign(assign({}, $$props), $$new_props))
      );
    };

    return {
      $$props,
      click_handler,
      $$props: ($$props = exclude_internal_props($$props))
    };
  }

  class Void extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance, create_fragment, safe_not_equal, []);
    }
  }

  return Void;
}

function getServerVoid(tag) {
  /* Void.svelte generated by Svelte v3.9.1 */
  const { create_ssr_component, spread } = require("svelte/internal");

  const Void = create_ssr_component(
    ($$result, $$props, $$bindings, $$slots) => {
      return `<${tag}${spread([$$props])}/>`;
    }
  );

  return Void;
}

export { getClientVoid, getServerVoid };
